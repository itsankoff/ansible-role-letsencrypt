---
- name: Install letsencrypt
  snap:
    name: certbot
    state: present
    classic: yes

- name: Make a certbot symlink in /usr/bin
  file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link

- name: Stop http service to issue certificate in standalone mode
  service:
    name: "{{ letsencrypt_http_service }}"
    state: stopped
  when: letsencrypt_mode == "stanalone"

- name: Install live certificate
  shell: >
    certbot certonly -n --{{ letsencrypt_mode }} -w {{ letsencrypt_webroot_dir }} -d {{ item }} -m {{ letsencrypt_email }} --agree-tos
  with_items: "{{ letsencrypt_domains }}"
  become: yes
  when: letsencrypt_production

- name: Install test certificate
  shell: >
    certbot certonly -n --staging --{{ letsencrypt_mode }} -w {{ letsencrypt_webroot_dir }} -d {{ item }} -m {{ letsencrypt_email }} --agree-tos
  with_items: "{{ letsencrypt_domains }}"
  become: yes
  when: not letsencrypt_production

- name: Ensure renewal cron destination exists
  file:
    path: "{{ letsencrypt_renewal_cron_dest }}"
    state: directory
    owner: "{{ ansible_user }}"

- name: Copy renewal cron
  template:
    src: "renewal_cron.j2"
    dest: "{{ letsencrypt_renewal_cron_dest }}/{{ letsencrypt_cron_filename }}.sh"
    mode: 0755

- name: Install renewal cron
  shell: >
      grep '{{ letsencrypt_cron_filename }}' /var/spool/cron/crontabs/* > /dev/null 2>&1 ||
      (crontab -l > /dev/null 2>&1 && crontab -l; echo "0 5 * * * {{ letsencrypt_renewal_cron_dest }}/{{ letsencrypt_cron_filename }}.sh >>
      {{ letsencrypt_renewal_cron_dest }}/{{ letsencrypt_cron_filename }}.log") | crontab -

- name: Start http service in standalone mode
  service:
    name: "{{ letsencrypt_http_service }}"
    state: restarted
  when: letsencrypt_mode == "stanalone"

- name: Reload http service to obtain the new certificates
  service:
    name: "{{ letsencrypt_http_service }}"
    state: reloaded
  when: letsencrypt_mode == "webroot"
